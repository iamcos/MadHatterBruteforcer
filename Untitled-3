		import sys, tty, termios
		fd = sys.stdin.fileno()
		old_settings = termios.tcgetattr(fd)
		def getch():
			try:
				tty.setraw(sys.stdin.fileno())
				ch = sys.stdin.read(1)
			finally:
				termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
			return ch

char = getch.getch()
print('Keyboard shortcunts: \n for selecting Bollinger bands\n w:bbl e:bbup )
if (char =="q"):
	print('bbands l selected')
	indicator = 	[EnumMadHatterIndicators.BBANDS, 0]
	print('SET selected: ', setbbl.errorCode, setbbl.errorMessage)

	elif (char == "w"):
		print('bbands devup selected')
		indicator = 	[EnumMadHatterIndicators.BBANDS, 1]

	elif (char == "e"):
		print('bbands devdn selected')
		indicator = [EnumMadHatterIndicators.BBANDS, 2]

	elif (char == "a"):
		print('RSI l selected')
		indicator = [EnumMadHatterIndicators.RSI, 0]

	elif (char == "s"):
			print('RSI Buy selected')
		indicator = [EnumMadHatterIndicators.RSI, 1]
	elif (char == "s"):
			print('RSI Sell selected')
		indicator = haasomeClient.customBotApi.set_mad_hatter_indicator_parameter(
		currentBotGuid, EnumMadHatterIndicators.RSI, 2, newparam)
	elif (char == "z"):
			print('MACD Fast selected')
		indicator = 	haasomeClient.customBotApi.set_mad_hatter_indicator_parameter(
		currentBotGuid, EnumMadHatterIndicators.MACD, 0, MACDFast)
	elif (char == "x"):
		print('MACD Slow selected')
		indicator = 	haasomeClient.customBotApi.set_mad_hatter_indicator_parameter(
	currentBotGuid, EnumMadHatterIndicators.MACD, 1, MACDFast)
		elif (char == "c"):
				print('MACD Signal selected')
			indicator = 	haasomeClient.customBotApi.set_mad_hatter_indicator_parameter(
		currentBotGuid, EnumMadHatterIndicators.MACD, 2, MACDFast)
		
		
	elif (not char):
					print("No char")
	elif (char == "a"):
					print("Left pressed")
					time.sleep(button_delay)

	

	elif (char == "w"):
					print("Up pressed")
					time.sleep(button_delay)

	elif (char == "s"):
					print("Down pressed")
					time.sleep(button_delay)

	elif (char == "1"):
					print("Number 1 pressed")
					time.sleep(button_delay)



# import only system from os 
from os import system, name 
  
# import sleep to show output for some time period 
from time import sleep 
  
# define our clear function 
def clear(): 
  
    # for windows 
    if name == 'nt': 
        _ = system('cls') 
  
    # for mac and linux(here, os.name is 'posix') 
    else: 
        _ = system('clear') 
try:
		input = raw_input
except NameError:
		pass
